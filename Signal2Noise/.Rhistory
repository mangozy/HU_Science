)
predict(gam2_hills_N1_macro6,df,type = "response")[2]
df = data.frame(pH = mean(trial2$pH),
WaterTemp = mean(trial2$pH),
Turbidity = mean(trial2$Turbidity),
SpCond = mean(trial2$SpCond),
O2Dis = mean(trial2$O2Dis),
Oxygen = mean(trial2$Oxygen),
Flow = mean(trial2$Flow),
Alkalinity = mean(trial2$Alkalinity),
StreamOrder = '3'
)
predict(gam2_hills_N1_macro6,df,type = "response").valueClassTest()
df = data.frame(pH = mean(trial2$pH),
WaterTemp = mean(trial2$pH),
Turbidity = mean(trial2$Turbidity),
SpCond = mean(trial2$SpCond),
O2Dis = mean(trial2$O2Dis),
Oxygen = mean(trial2$Oxygen),
Flow = mean(trial2$Flow),
Alkalinity = mean(trial2$Alkalinity),
StreamOrder = '3'
)
predict(gam2_hills_N1_macro6,df,type = "response")
df = data.frame(pH = mean(trial2$pH),
WaterTemp = mean(trial2$pH),
Turbidity = mean(trial2$Turbidity),
SpCond = mean(trial2$SpCond),
O2Dis = mean(trial2$O2Dis),
Oxygen = mean(trial2$Oxygen),
Flow = mean(trial2$Flow),
Alkalinity = mean(trial2$Alkalinity),
StreamOrder = '3'
)
predict(gam2_hills_N1_macro6,df,type = "response")[,1]
df = data.frame(pH = mean(trial2$pH),
WaterTemp = mean(trial2$pH),
Turbidity = mean(trial2$Turbidity),
SpCond = mean(trial2$SpCond),
O2Dis = mean(trial2$O2Dis),
Oxygen = mean(trial2$Oxygen),
Flow = mean(trial2$Flow),
Alkalinity = mean(trial2$Alkalinity),
StreamOrder = '3'
)
predict(gam2_hills_N1_macro6,df,type = "response")[1,]
df = data.frame(pH = mean(trial2$pH),
WaterTemp = mean(trial2$pH),
Turbidity = mean(trial2$Turbidity),
SpCond = mean(trial2$SpCond),
O2Dis = mean(trial2$O2Dis),
Oxygen = mean(trial2$Oxygen),
Flow = mean(trial2$Flow),
Alkalinity = mean(trial2$Alkalinity),
StreamOrder = '3'
)
a = predict(gam2_hills_N1_macro6,df,type = "response")
a
a(1)
a[1]
data.frame(a)
data.frame(a)[1]
data.frame(a)[1,1]
data.frame(predict(gam2_hills_N1_macro6,df,type = "response"))[1,1]
runApp()
runApp()
runApp()
runApp()
trial2$StreamOrder
mean(trial2$StreamOrder)
mean(as.integer(trial2$StreamOrder))
as.integer(mean(as.integer(trial2$StreamOrder)))
as.factor(as.integer(mean(as.integer(trial2$StreamOrder))))
runApp()
runApp()
runApp()
df = data.frame(pH = 7.56,
WaterTemp = 13.3,
Turbidity = 4.4,
SpCond = 0.168,
O2Dis = 9.34,
Oxygen = 1388,
Flow = 1182,
Alkalinity = 1660,
StreamOrder = '3'
)
data.frame(predict(gam2_hills_N1_macro6,df,type = "response"))[1,1]
runApp()
runApp()
df = data.frame(pH = 7.58,
WaterTemp = 15.3,
Turbidity = 4.4,
SpCond = 0.144,
O2Dis = 9.24,
Oxygen = 1355,
Flow = 1464,
Alkalinity = 1236,
StreamOrder = as.factor('5')
)
data.frame(predict(gam2_hills_N1_macro6,df,type = "response"))[1,1]
df = data.frame(pH = 7.58,
WaterTemp = 15.3,
Turbidity = 4.4,
SpCond = 0.144,
O2Dis = 9.24,
Oxygen = 1355,
Flow = 1464,
Alkalinity = 1236,
StreamOrder = as.factor('5')
)
data.frame(predict(gam2_hills_N1_macro6,df,type = "response"))[1,1]
knitr::opts_chunk$set(echo = TRUE)
load('../data/DataAll.RData')
# if (!require('mgcv')) install.packages('mgcv', quiet=TRUE)
# if (!require('NMOF')) install.packages('NMOF', quiet=TRUE)
# if (!require('PLYR')) install.packages('PLYR', quiet=TRUE)
# library(NMOF)
library(mgcv)
library(plyr)
library(dplyr)
library(reshape2)
allData3 <- plyr::rename(allData3,c("Oxygen (mg/l)" = "Oxygen",
"Potassium (mg/l)" = "Potassium",
"Ammonia (mg/l)" = "Ammonia",
"Nitrate-N (mg/l)" = "Nitrate",
"Nitrite (mg/l)" = "Nitrite",
"Alkalinity (mg/l)" = "Alkalinity",
"Flow (cfs)" = "Flow"))
gam_data_macro <- allData3[!is.na(allData3$Hills_N1_macro),]
summary(gam_data_macro$pH)
summary(gam_data_macro$WaterTemp)
summary(gam_data_macro$Turbidity)
summary(gam_data_macro$SpCond)
summary(gam_data_macro$O2Dis)
summary(gam_data_macro$Alkalinity)
summary(gam_data_macro$Oxygen)
summary(gam_data_macro$Potassium)
summary(gam_data_macro$Ammonia)
summary(gam_data_macro$Nitrate)
summary(gam_data_macro$Nitrite)
summary(gam_data_macro$Flow)
dd <- gam_data_macro[c(331:335,grep("Oxygen", colnames(gam_data_macro)),
grep("Flow", colnames(gam_data_macro)),
grep("Alkalinity", colnames(gam_data_macro))[1],
grep("Hills_N1_macro", colnames(gam_data_macro)),
grep("Hills_N2_macro", colnames(gam_data_macro)),
grep("margalef_macro", colnames(gam_data_macro)),
grep("pielou_macro", colnames(gam_data_macro)))]
plot(dd)
plot(dd$Hills_N1_macro)
plot(dd$Hills_N1_macro, dd$Turbidity)
plot(dd$Hills_N1_macro, dd$WaterTemp)
plot(dd$Hills_N1_macro, dd$SpCond)
plot(dd$Hills_N1_macro, dd$Oxygen)
## process data.frame producing binary indicators of missingness,
## mx0, mx1 etc. For each missing value create a level of a factor
## idx0, idx1, etc. So idx0 has as many levels as x0 has missing
## values. Replace the NA's in each variable by the mean of the
## non missing for that variable...
dname <- names(gam_data_macro)[c(grep("WaterTemp", colnames(gam_data_macro)),
grep("SpCond", colnames(gam_data_macro)),grep("Turbidity", colnames(gam_data_macro))[2],
grep("O2Dis", colnames(gam_data_macro)), grep("pH", colnames(gam_data_macro))[2],
grep("Oxygen", colnames(gam_data_macro)),
grep("Potassium", colnames(gam_data_macro)),grep("Ammonia", colnames(gam_data_macro)),
grep("Nitrate", colnames(gam_data_macro))[1],grep("Nitrite", colnames(gam_data_macro))[2],
grep("Alkalinity", colnames(gam_data_macro))[1],grep("Flow", colnames(gam_data_macro)))]
gam_dat_macro1 <- gam_data_macro
n <-  dim(gam_dat_macro1)[1]
for (i in 1:12) {
by.name <- paste("m",dname[i],sep="")
gam_dat_macro1[[by.name]] <- is.na(gam_dat_macro1[[dname[i]]])
gam_dat_macro1[[dname[i]]][gam_dat_macro1[[by.name]]] <- mean(gam_dat_macro1[[dname[i]]],na.rm=TRUE)
lev <- rep(1,n);lev[gam_dat_macro1[[by.name]]] <- 1:sum(gam_dat_macro1[[by.name]])
id.name <- paste("id",dname[i],sep="")
gam_dat_macro1[[id.name]] <- factor(lev)
gam_dat_macro1[[by.name]] <- as.numeric(gam_dat_macro1[[by.name]])
}
gam_dat_macro2 <- gam_dat_macro1[-c(53),]
y <- seq(3, 8, length.out = 6)
d <- expand.grid(x1 = y, x2 = y,x3 = y,x4 = y,x5 = y,x6 = y,x7 = y, x8 = y)
#####
# add stream order as input to gam model
trial1 <- merge(gam_dat_macro1,allDatat,by = c("DateTime", "StationID"),all = TRUE)
trial2 <- trial1[-c(53),]
gam2_hills_N1_macro6 <- gam(Hills_N1_macro.y ~
s(pH, k=10) +
s(WaterTemp, k=10) +
s(Turbidity,k=10, bs="ad") +
s(SpCond,k=15, bs="ad") +
s(O2Dis,k=10, bs="ad") +
s(Oxygen,k=10, bs="ad") +
s(Flow,k=15)+
s(Alkalinity,k=15, bs="ad")+
(StreamOrder),
data= trial2, na.action = 'na.omit') # method REML results not better than GCV
summary(gam2_hills_N1_macro6)
# check the smoothing basis dimensions
gam.check(gam2_hills_N1_macro6)
#Plotting the Model
plot(gam2_hills_N1_macro6,se = TRUE)
AIC(gam2_hills_N1_macro6)
df = data.frame(pH = 7.58,
WaterTemp = 15.3,
Turbidity = 4.4,
SpCond = 0.144,
O2Dis = 9.24,
Oxygen = 1355,
Flow = 1464,
Alkalinity = 1236,
StreamOrder = as.factor('5')
)
data.frame(predict(gam2_hills_N1_macro6,df,type = "response"))[1,1]
#####
# add stream order as input to gam model
gam2_hills_N2_macro2 <- gam(Hills_N2_macro.y ~
s(pH, k=10) +
s(WaterTemp, k=10) +
s(Turbidity,k=10, bs="ad") +
s(SpCond,k=15, bs="ad") +
s(O2Dis,k=10, bs="ad") +
s(Oxygen,k=10, bs="ad") +
s(Flow,k=15)+
s(Alkalinity,k=15, bs="ad")+
(StreamOrder),
data= trial2, na.action = 'na.omit') # method REML results not better than GCV
summary(gam2_hills_N2_macro2)
# check the smoothing basis dimensions
gam.check(gam2_hills_N2_macro2)
#Plotting the Model
plot(gam2_hills_N2_macro2,se = TRUE)
AIC(gam2_hills_N2_macro2)
#####
# add stream order as input to gam model
gam2_margalef_macro2 <- gam(margalef_macro ~
s(pH, k=10) +
s(WaterTemp, k=10) +
s(Turbidity,k=10, bs="ad") +
s(SpCond,k=15, bs="ad") +
s(O2Dis,k=10, bs="ad") +
s(Oxygen,k=10, bs="ad") +
s(Flow,k=15)+
s(Alkalinity,k=15, bs="ad")+
(StreamOrder),
data= trial2, na.action = 'na.omit') # method REML results not better than GCV
summary(gam2_margalef_macro2)
# check the smoothing basis dimensions
gam.check(gam2_margalef_macro2)
#Plotting the Model
plot(gam2_margalef_macro2,se = TRUE)
AIC(gam2_margalef_macro2)
df = data.frame(pH = 7.58,
WaterTemp = 15.3,
Turbidity = 4.4,
SpCond = 0.144,
O2Dis = 9.24,
Oxygen = 1355,
Flow = 1464,
Alkalinity = 1236,
StreamOrder = as.factor('5')
)
data.frame(predict(gam2_hills_N1_macro6,df,type = "response"))[1,1]
data.frame(predict(gam2_hills_N2_macro2,df,type = "response"))[1,1]
data.frame(predict(gam2_margalef_macro2,df,type = "response"))[1,1]
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
packages <- c('mgcv','plyr','dplyr')
for(p in packages){
if(!require(p,character.only = TRUE)) install.packages(p, dependencies = TRUE)
suppressMessages(library(p,character.only = TRUE, quietly = TRUE))
}
load('../data/DataAll.RData')
if (!require('mgcv')) install.packages('mgcv', quiet=TRUE)
# if (!require('NMOF')) install.packages('NMOF', quiet=TRUE)
if (!require('PLYR')) install.packages('PLYR', quiet=TRUE)
# library(NMOF)
library(mgcv)
library(plyr)
library(dplyr)
allData2 <- plyr::rename(allData2,c("Oxygen (mg/l)" = "Oxygen",
"Potassium (mg/l)" = "Potassium",
"Ammonia (mg/l)" = "Ammonia",
"Nitrate-N (mg/l)" = "Nitrate",
"Nitrite (mg/l)" = "Nitrite",
"Flow (cfs)" = "Flow"))
gam_data <- allData2[!is.na(allData2$Hills_N1),]
summary(gam_data$pH)
summary(gam_data$WaterTemp)
summary(gam_data$Turbidity)
summary(gam_data$SpCond)
summary(gam_data$O2Dis)
#summary(gam_data$Chlorophyll)
summary(gam_data$Oxygen)
summary(gam_data$Potassium)
summary(gam_data$Ammonia)
summary(gam_data$Nitrate)
summary(gam_data$Nitrite)
summary(gam_data$Flow)
dd <- gam_data[c(326:330,grep("Oxygen", colnames(gam_data)),
grep("Flow", colnames(gam_data)),
grep("Hills_N1", colnames(gam_data)),
grep("Hills_N2", colnames(gam_data)),
grep("margalef", colnames(gam_data)),
grep("pielou", colnames(gam_data)))]
plot(dd)
plot(dd$Hills_N1)
plot(dd$Hills_N1, dd$Turbidity)
## process data.frame producing binary indicators of missingness,
## mx0, mx1 etc. For each missing value create a level of a factor
## idx0, idx1, etc. So idx0 has as many levels as x0 has missing
## values. Replace the NA's in each variable by the mean of the
## non missing for that variable...
## WaterTemp, SpCond, O2Dis, Oxygen, Potassium, Nitrate, Flow
dname <- names(gam_data)[c(grep("WaterTemp", colnames(gam_data)),
grep("SpCond", colnames(gam_data)),grep("Turbidity", colnames(gam_data))[2],
grep("O2Dis", colnames(gam_data)), grep("pH", colnames(gam_data))[2],
grep("Oxygen", colnames(gam_data)),
grep("Potassium", colnames(gam_data)),grep("Ammonia", colnames(gam_data)),
grep("Nitrate", colnames(gam_data))[1],grep("Nitrite", colnames(gam_data))[2],
grep("Flow", colnames(gam_data)))]
gam_dat1 <- gam_data
n <-  dim(gam_dat1)[1]
for (i in 1:11) {
by.name <- paste("m",dname[i],sep="")
gam_dat1[[by.name]] <- is.na(gam_dat1[[dname[i]]])
gam_dat1[[dname[i]]][gam_dat1[[by.name]]] <- mean(gam_dat1[[dname[i]]],na.rm=TRUE)
lev <- rep(1,n);lev[gam_dat1[[by.name]]] <- 1:sum(gam_dat1[[by.name]])
id.name <- paste("id",dname[i],sep="")
gam_dat1[[id.name]] <- factor(lev)
gam_dat1[[by.name]] <- as.numeric(gam_dat1[[by.name]])
}
gam_dat2 <- gam_dat1[-c(30,37),]
y <- seq(3, 8, length.out = 6)
d <- expand.grid(x1 = y, x2 = y,x3 = y,x4 = y,x5 = y,x6 = y,x7 = y)
library(readr)
result_out <- read_csv("../data/Gam_Grid_outlier_removal.csv")
result_out$X1 <- NULL
indx_min <- which.min(result_out$V1)
gam2_hills_N1 <- gam(Hills_N1 ~
s(pH,k=as.numeric(result_out[indx_min,1]))
+  s(WaterTemp,k=as.numeric(result_out[indx_min,2]))
+  s(Turbidity,k=as.numeric(result_out[indx_min,3]))
+  s(SpCond,k=as.numeric(result_out[indx_min,4]))
+  s(O2Dis,k=as.numeric(result_out[indx_min,5]))
+  s(Oxygen,k=as.numeric(result_out[indx_min,6]))
+  s(Flow,k=as.numeric(result_out[indx_min,7]))
,  data= gam_dat2, na.action = 'na.omit') # method REML results not better than GCV
summary(gam2_hills_N1)
# check the smoothing basis dimensions
gam.check(gam2_hills_N1)
#Plotting the Model
plot(gam2_hills_N1,se = TRUE)
AIC(gam2_hills_N1)
gam2_hills_N1$coefficients
#summary(gam2_hills_N1)$p.table
gam2_hills_N2 <- gam(Hills_N2 ~
s(pH,k=as.numeric(result_out[indx_min,1]))
+  s(WaterTemp,k=as.numeric(result_out[indx_min,2]))
+  s(Turbidity,k=as.numeric(result_out[indx_min,3]))
+  s(SpCond,k=as.numeric(result_out[indx_min,4]))
+  s(O2Dis,k=as.numeric(result_out[indx_min,5]))
+  s(Oxygen,k=as.numeric(result_out[indx_min,6]))
+  s(Flow,k=as.numeric(result_out[indx_min,7]))
,  data= gam_dat2, na.action = 'na.omit') # method REML results not better than GCV
summary(gam2_hills_N2)
# check the smoothing basis dimensions
gam.check(gam2_hills_N2)
#Plotting the Model
plot(gam2_hills_N2,se = TRUE)
AIC(gam2_hills_N2)
gam2_hills_N2$coefficients
gam2_margalef <- gam(margalef ~
s(pH,k=as.numeric(result_out[indx_min,1]))
+  s(WaterTemp,k=as.numeric(result_out[indx_min,2]))
+  s(Turbidity,k=as.numeric(result_out[indx_min,3]))
+  s(SpCond,k=as.numeric(result_out[indx_min,4]))
+  s(O2Dis,k=as.numeric(result_out[indx_min,5]))
+  s(Oxygen,k=as.numeric(result_out[indx_min,6]))
+  s(Flow,k=as.numeric(result_out[indx_min,7]))
,  data= gam_dat2, na.action = 'na.omit') # method REML results not better than GCV
summary(gam2_margalef)
# check the smoothing basis dimensions
gam.check(gam2_margalef)
#Plotting the Model
plot(gam2_margalef,se = TRUE)
AIC(gam2_margalef)
gam2_margalef$coefficients
df = data.frame(pH = 7.58,
WaterTemp = 15.3,
Turbidity = 4.4,
SpCond = 0.144,
O2Dis = 9.24,
Oxygen = 1355,
Flow = 1464,
Alkalinity = 1236,
StreamOrder = as.factor('5')
)
data.frame(predict(gam2_hills_N1,df,type = "response"))[1,1]
data.frame(predict(gam2_hills_N2,df,type = "response"))[1,1]
data.frame(predict(gam2_margalef,df,type = "response"))[1,1]
runApp()
df = data.frame(pH = 7.58,
WaterTemp = 15.3,
Turbidity = 4.4,
SpCond = 0.144,
O2Dis = 9.24,
Oxygen = 1343,
Flow = 1464
)
data.frame(predict(gam2_hills_N1,df,type = "response"))[1,1]
data.frame(predict(gam2_hills_N2,df,type = "response"))[1,1]
data.frame(predict(gam2_margalef,df,type = "response"))[1,1]
runApp()
df = data.frame(pH = 7.58,
WaterTemp = 15.3,
Turbidity = 4.4,
SpCond = 0.144,
O2Dis = 9.24,
Oxygen = 1343,
Flow = 1464
)
data.frame(predict(gam2_hills_N1,df,type = "response"))[1,1]
data.frame(predict(gam2_hills_N2,df,type = "response"))[1,1]
data.frame(predict(gam2_margalef,df,type = "response"))[1,1]
runApp()
df = data.frame(pH = 7.58,
WaterTemp = 15.3,
Turbidity = 4.4,
SpCond = 0.144,
O2Dis = 9.24,
Oxygen = 1343,
Flow = 1462
)
data.frame(predict(gam2_hills_N1,df,type = "response"))[1,1]
data.frame(predict(gam2_hills_N2,df,type = "response"))[1,1]
data.frame(predict(gam2_margalef,df,type = "response"))[1,1]
shiny::runApp()
runApp()
runApp()
runApp('../Signal2Noise _en')
runApp('../Signal2Noise _en')
runApp('../Signal2Noise _en')
runApp('../Signal2Noise _en')
runApp('../Signal2Noise _en')
runApp('../Signal2Noise _en')
runApp('../Signal2Noise _en')
runApp('../Signal2Noise _en')
runApp('../Signal2Noise _en')
runApp('../Signal2Noise _en')
runApp('../Signal2Noise _en')
shiny::runApp()
runApp()
runApp('~/tt')
runApp()
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
source('~/test/app.R')
runApp('~/test')
runApp()
runApp()
runApp('~/test')
?checkboxGroupInput
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp()
runApp('~/test')
runApp('~/test')
runApp('~/test')
?checkboxGroupInput
runApp('~/test')
runApp('~/test')
runApp('~/test')
runApp()
runApp('~/test')
runApp('~/test')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
metrics_value = c("HillsN1","HillsN2","Margalef")
metrics_value[3]
metrics_value[3]
runApp()
runApp()
runApp()
runApp('~/Igor')
runApp()
runApp('~/Igor')
runApp('~/Igor')
install.packages("shinyjs")
install.packages(c("magick", "shinydashboard"))
shiny::runApp()
